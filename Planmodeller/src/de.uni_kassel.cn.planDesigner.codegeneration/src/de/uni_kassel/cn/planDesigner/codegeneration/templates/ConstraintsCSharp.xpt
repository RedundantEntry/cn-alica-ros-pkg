«IMPORT alica»  
«EXTENSION de::uni_kassel::cn::planDesigner::codegeneration::extensions::util»
«DEFINE Root FOR PlanningProblem»«ENDDEFINE»
«DEFINE Root FOR Plan»

	«FILE name + "Constraints.cs"»
	
		using System;
		using System.Collections.Generic;
		using Alica;
		using AD = AutoDiff;
		
		«PROTECT CSTART '/*' CEND '*/' ID "ch"+this.id »
			//Add additional using directives here
		«ENDPROTECT»
		
		namespace Alica.Validators
		{	
			public partial class ConstraintFunctions{
			//Plan:«this.name»
			«EXPAND description»
			«EXPAND abstractPlanChecking»
			«EXPAND doExpandStates»			
			}
		}
	«ENDFILE»

«ENDDEFINE»
«DEFINE BehaviourConfiguration FOR BehaviourConfiguration»
«FILE behaviour.name + id + "BehaviourConstraints.cs"»
		using System;
		using System.Collections.Generic;
		using Alica;
		using AD = AutoDiff;
		
		«PROTECT CSTART '/*' CEND '*/' ID "ch"+this.id »
			//Add additional using directives here
		«ENDPROTECT»
		
		namespace Alica.Validators
		{	
			public partial class ConstraintFunctions{ //«this.id» {

			//BehaviourConfiguration: «this.name» «this.id»
			«EXPAND abstractPlanChecking»
			}
		}				
«ENDFILE»
«ENDDEFINE»

«DEFINE description FOR Plan»
/*		
* Tasks: «FOREACH entryPoints AS planEntryPoint»
* - EP:«planEntryPoint.id» : «planEntryPoint.task.name» («planEntryPoint.task.id»)«ENDFOREACH»
*
* States:«FOREACH states AS state»
* - «state.name» («state.id»)«ENDFOREACH»
*
* Vars:«FOREACH vars AS var»				
* - «var.name» («var.id») «ENDFOREACH»
*/
«ENDDEFINE»


«DEFINE stateCheckingMethods(State s) FOR Plan»
// State: «s.name»
«FOREACH s.outTransitions AS transition»
«IF transition.preCondition.id > 0»
«IF (transition.preCondition.vars.size > 0) || (transition.preCondition.quantifiers.size > 0)»
/*		
* Transition: 
* - Name: «transition.name»
* - ConditionString: «transition.preCondition.conditionString»
*
* Plans in State: «FOREACH s.plans AS plan»				
* - Plan - (Name): «plan.name», (PlanID): «plan.id» «ENDFOREACH»
* Static Variables: «transition.preCondition.vars.name»
* Domain Variables:
«FOREACH transition.preCondition.quantifiers AS q»
* forall agents in «q.scope.name» let v = «q.sorts» 
«ENDFOREACH»
*/
public static void GetConstraint«transition.preCondition.id»(ConstraintDescriptor c, RunningPlan rp) {
«PROTECT CSTART '/*' CEND '*/' ID "cc"+transition.id »
	//WorldModel wm = WorldModel.Get();
«ENDPROTECT»			
}
«ENDIF»
«ENDIF»
«ENDFOREACH»
«ENDDEFINE»

«DEFINE doExpandStates FOR Plan»
	«FOREACH states AS state»
		«EXPAND stateCheckingMethods(state)»
		«EXPAND BehaviourConfiguration FOREACH collectBehaviours(state)»
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE planCheckingMethods FOR AbstractPlan»
	«FOREACH runtimeConditions() AS rc»
	«IF (rc.vars.size > 0) || (rc.quantifiers.size > 0)»
/*
* RuntimeCondition - (Name): «rc.name»
* (ConditionString): «rc.conditionString»
* Static Variables: «rc.vars.name»
* Domain Variables:
«FOREACH rc.quantifiers AS q»
* forall agents in «q.scope.name» let v = «q.sorts» 
«ENDFOREACH»
*/
public static void GetConstraint«rc.id»(ConstraintDescriptor c, RunningPlan rp) {
«PROTECT CSTART '/*' CEND '*/' ID "cc"+rc.id »
	//WorldModel wm = WorldModel.Get();	
«ENDPROTECT»			    
}				
	«ENDIF»
	«ENDFOREACH»
	«FOREACH preConditions() AS pc»
	«IF (pc.vars.size > 0) || (pc.quantifiers.size > 0)»
/*
* PreCondition - (Name): «pc.name»
* (ConditionString): «pc.conditionString»
* Static Variables: «pc.vars.name»
* Domain Variables:
«FOREACH pc.quantifiers AS q»
* forall agents in «q.scope.name» let v = «q.sorts» 
«ENDFOREACH»
*/
public static void GetConstraint«pc.id»(ConstraintDescriptor c, RunningPlan rp) {
«PROTECT CSTART '/*' CEND '*/' ID "cc"+pc.id »
	//WorldModel wm = WorldModel.Get();	
«ENDPROTECT»			    
}
	«ENDIF»			
	«ENDFOREACH»
«ENDDEFINE»


«DEFINE abstractPlanChecking FOR AbstractPlan»			
		«EXPAND planCheckingMethods»				
«ENDDEFINE»
